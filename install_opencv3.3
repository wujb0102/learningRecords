1下载opencv3.3源码和对应的opencv_contrib源码。下载链接：
2创建opencv3.3目录，两个源码解压在opencv3.3下面。在opencv目录下创建build目录作为安装目录，进入opencv-master目录下，创建release目录，用于存放cmake生成的文件。
2安装依赖库
$sudo apt-get install build-essential
$sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev
$sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev
3在release目录下执行
$cmake -D CMAKE_BUILD_TYPE=Release -D OPENCV_EXTRA_MODULES_PATH=/home/wujb/opencv3.3/opencv_contrib-master/modules -D CMAKE_INSTALL_PREFIX=/home/wujb/opencv3.3/build ..
4编译opencv
$make
5安装opencv
$sudo make install
6配置，将opencv库加入环境变量，这样有些框架（caffe）在调用opencv库的时候，可以找到他们
（1）在/etc/ld.so.conf.d/目录下创建opencv.conf(原来有的话，直接在添加)并添加库文件路径/home/wujb/opencv3.3/build/lib,执行sudo ldconfig 使路径生效
（2）配置bash
$sudo vim /etc/bash.bashrc
在文件最后添加
PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/home/wujb/opencv3.3/build/lib/pkgconfig  
export PKG_CONFIG_PATH 
使配置生效
source /etc/bash.bashrc

注意事项：
1.由于电脑的不同可能导致在执行cmake时失败，查看报错的日志，如果使C++11的原因的话，打开opencv-master/CMakeList.txt,添加set(CMAKE_CXX_FLAGS "-std=c++11")，然后在cmake时添加-D ENABLE_CXX11=ON如下：
$cmake -D ENABLE_CXX11=ON -D CMAKE_BUILD_TYPE=Release -D OPENCV_EXTRA_MODULES_PATH=/home/wujb/opencv3.3/opencv_contrib-master/modules -D CMAKE_INSTALL_PREFIX=/home/wujb/opencv3.3/build ..
这样就能编译成功。
2执行cmake [各种参数配置] .. 时最好用绝对路径，相对路径可能会有问题（不同电脑有些差异）。 
2如果需要重复执行cmake时的出现问题：CMake Error: The source directory "/home/wujb" does not appear to contain CMakeLists.txt.
直接删除CMakeCache.txt.及release目录，再重新建release目录再cmake
3执行make时最好不要采用多线程编译，虽然速度快但是可能出现莫名奇妙的错误。
4如果安装依赖项时出现问题：[E: 软件包 libxine-dev 没有可安装候选。]目前看来可直接跳过，对之后的开发没有太大影响。

知识点补充：
1 make、cmake、make install、configure讲解
http://blog.csdn.net/sinat_34710558/article/details/51225789
2pkg-config的一些用法
http://blog.csdn.net/luotuo44/article/details/24836901






（自从进入3.X时代以后，OpenCV将代码库分成了两部分，分别是稳定的核心功能库和试验性质的contrib库）

